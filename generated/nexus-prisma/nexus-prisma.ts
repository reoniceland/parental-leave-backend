/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Person: PersonObject
      PersonConnection: PersonConnectionObject
      PageInfo: PageInfoObject
      PersonEdge: PersonEdgeObject
      AggregatePerson: AggregatePersonObject
      Submission: SubmissionObject
      timeframe: timeframeObject
      SubmissionConnection: SubmissionConnectionObject
      SubmissionEdge: SubmissionEdgeObject
      AggregateSubmission: AggregateSubmissionObject
      timeframeConnection: timeframeConnectionObject
      timeframeEdge: timeframeEdgeObject
      Aggregatetimeframe: AggregatetimeframeObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PersonSubscriptionPayload: PersonSubscriptionPayloadObject
      PersonPreviousValues: PersonPreviousValuesObject
      SubmissionSubscriptionPayload: SubmissionSubscriptionPayloadObject
      SubmissionPreviousValues: SubmissionPreviousValuesObject
      timeframeSubscriptionPayload: timeframeSubscriptionPayloadObject
      timeframePreviousValues: timeframePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Person: PersonFieldDetails
      PersonConnection: PersonConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PersonEdge: PersonEdgeFieldDetails
      AggregatePerson: AggregatePersonFieldDetails
      Submission: SubmissionFieldDetails
      timeframe: timeframeFieldDetails
      SubmissionConnection: SubmissionConnectionFieldDetails
      SubmissionEdge: SubmissionEdgeFieldDetails
      AggregateSubmission: AggregateSubmissionFieldDetails
      timeframeConnection: timeframeConnectionFieldDetails
      timeframeEdge: timeframeEdgeFieldDetails
      Aggregatetimeframe: AggregatetimeframeFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PersonSubscriptionPayload: PersonSubscriptionPayloadFieldDetails
      PersonPreviousValues: PersonPreviousValuesFieldDetails
      SubmissionSubscriptionPayload: SubmissionSubscriptionPayloadFieldDetails
      SubmissionPreviousValues: SubmissionPreviousValuesFieldDetails
      timeframeSubscriptionPayload: timeframeSubscriptionPayloadFieldDetails
      timeframePreviousValues: timeframePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PersonWhereUniqueInput: PersonWhereUniqueInputInputObject
      PersonWhereInput: PersonWhereInputInputObject
      SubmissionWhereUniqueInput: SubmissionWhereUniqueInputInputObject
      timeframeWhereInput: timeframeWhereInputInputObject
      SubmissionWhereInput: SubmissionWhereInputInputObject
      timeframeWhereUniqueInput: timeframeWhereUniqueInputInputObject
      PersonCreateInput: PersonCreateInputInputObject
      PersonUpdateInput: PersonUpdateInputInputObject
      PersonUpdateManyMutationInput: PersonUpdateManyMutationInputInputObject
      SubmissionCreateInput: SubmissionCreateInputInputObject
      timeframeCreateManyInput: timeframeCreateManyInputInputObject
      timeframeCreateInput: timeframeCreateInputInputObject
      PersonCreateOneInput: PersonCreateOneInputInputObject
      SubmissionUpdateInput: SubmissionUpdateInputInputObject
      timeframeUpdateManyInput: timeframeUpdateManyInputInputObject
      timeframeUpdateWithWhereUniqueNestedInput: timeframeUpdateWithWhereUniqueNestedInputInputObject
      timeframeUpdateDataInput: timeframeUpdateDataInputInputObject
      timeframeUpsertWithWhereUniqueNestedInput: timeframeUpsertWithWhereUniqueNestedInputInputObject
      timeframeScalarWhereInput: timeframeScalarWhereInputInputObject
      timeframeUpdateManyWithWhereNestedInput: timeframeUpdateManyWithWhereNestedInputInputObject
      timeframeUpdateManyDataInput: timeframeUpdateManyDataInputInputObject
      PersonUpdateOneRequiredInput: PersonUpdateOneRequiredInputInputObject
      PersonUpdateDataInput: PersonUpdateDataInputInputObject
      PersonUpsertNestedInput: PersonUpsertNestedInputInputObject
      SubmissionUpdateManyMutationInput: SubmissionUpdateManyMutationInputInputObject
      timeframeUpdateInput: timeframeUpdateInputInputObject
      timeframeUpdateManyMutationInput: timeframeUpdateManyMutationInputInputObject
      PersonSubscriptionWhereInput: PersonSubscriptionWhereInputInputObject
      SubmissionSubscriptionWhereInput: SubmissionSubscriptionWhereInputInputObject
      timeframeSubscriptionWhereInput: timeframeSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    PersonOrderByInput: PersonOrderByInputValues,
    timeframeOrderByInput: timeframeOrderByInputValues,
    SubmissionOrderByInput: SubmissionOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'person', args?: QueryPersonArgs[] | false, alias?: string  } 
  | { name: 'persons', args?: QueryPersonsArgs[] | false, alias?: string  } 
  | { name: 'personsConnection', args?: QueryPersonsConnectionArgs[] | false, alias?: string  } 
  | { name: 'submission', args?: QuerySubmissionArgs[] | false, alias?: string  } 
  | { name: 'submissions', args?: QuerySubmissionsArgs[] | false, alias?: string  } 
  | { name: 'submissionsConnection', args?: QuerySubmissionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'timeframe', args?: QueryTimeframeArgs[] | false, alias?: string  } 
  | { name: 'timeframes', args?: QueryTimeframesArgs[] | false, alias?: string  } 
  | { name: 'timeframesConnection', args?: QueryTimeframesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'person'
  | 'persons'
  | 'personsConnection'
  | 'submission'
  | 'submissions'
  | 'submissionsConnection'
  | 'timeframe'
  | 'timeframes'
  | 'timeframesConnection'


type QueryPersonArgs =
  | 'where'
type QueryPersonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPersonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubmissionArgs =
  | 'where'
type QuerySubmissionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubmissionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeframeArgs =
  | 'where'
type QueryTimeframesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeframesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  person: {
    type: 'Person'
    args: Record<QueryPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  persons: {
    type: 'Person'
    args: Record<QueryPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person[]> | prisma.Person[]
  }
  personsConnection: {
    type: 'PersonConnection'
    args: Record<QueryPersonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonConnection> | prisma.PersonConnection
  }
  submission: {
    type: 'Submission'
    args: Record<QuerySubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SubmissionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission | null> | prisma.Submission | null
  }
  submissions: {
    type: 'Submission'
    args: Record<QuerySubmissionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubmissionWhereInput | null, orderBy?: prisma.SubmissionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission[]> | prisma.Submission[]
  }
  submissionsConnection: {
    type: 'SubmissionConnection'
    args: Record<QuerySubmissionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubmissionWhereInput | null, orderBy?: prisma.SubmissionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubmissionConnection> | prisma.SubmissionConnection
  }
  timeframe: {
    type: 'timeframe'
    args: Record<QueryTimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: timeframeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe | null> | prisma.timeframe | null
  }
  timeframes: {
    type: 'timeframe'
    args: Record<QueryTimeframesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: timeframeWhereInput | null, orderBy?: prisma.timeframeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe[]> | prisma.timeframe[]
  }
  timeframesConnection: {
    type: 'timeframeConnection'
    args: Record<QueryTimeframesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: timeframeWhereInput | null, orderBy?: prisma.timeframeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframeConnection> | prisma.timeframeConnection
  }
}
  

// Types for Person

type PersonObject =
  | PersonFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'kennitala', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'income', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'personal_discount', args?: [] | false, alias?: string  } 
  | { name: 'pension', args?: [] | false, alias?: string  } 
  | { name: 'additional_pension', args?: [] | false, alias?: string  } 
  | { name: 'union_fees', args?: [] | false, alias?: string  } 
  | { name: 'income_tax_rate', args?: [] | false, alias?: string  } 
  | { name: 'expected_date_of_birth', args?: [] | false, alias?: string  } 

type PersonFields =
  | 'id'
  | 'kennitala'
  | 'name'
  | 'income'
  | 'address'
  | 'personal_discount'
  | 'pension'
  | 'additional_pension'
  | 'union_fees'
  | 'income_tax_rate'
  | 'expected_date_of_birth'



  

export interface PersonFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  kennitala: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  income: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  personal_discount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pension: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  additional_pension: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  union_fees: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  income_tax_rate: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected_date_of_birth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PersonConnection

type PersonConnectionObject =
  | PersonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PersonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PersonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PersonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonEdge[]> | prisma.PersonEdge[]
  }
  aggregate: {
    type: 'AggregatePerson'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePerson> | prisma.AggregatePerson
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PersonEdge

type PersonEdgeObject =
  | PersonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PersonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PersonEdgeFieldDetails {
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePerson

type AggregatePersonObject =
  | AggregatePersonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePersonFields =
  | 'count'



  

export interface AggregatePersonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Submission

type SubmissionObject =
  | SubmissionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'timeframes', args?: SubmissionTimeframesArgs[] | false, alias?: string  } 
  | { name: 'person', args?: [] | false, alias?: string  } 
  | { name: 'number_of_months', args?: [] | false, alias?: string  } 

type SubmissionFields =
  | 'id'
  | 'timeframes'
  | 'person'
  | 'number_of_months'


type SubmissionTimeframesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SubmissionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  timeframes: {
    type: 'timeframe'
    args: Record<SubmissionTimeframesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Submission">,
      args: { where?: timeframeWhereInput | null, orderBy?: prisma.timeframeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe[]> | prisma.timeframe[]
  }
  person: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Submission">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  number_of_months: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for timeframe

type timeframeObject =
  | timeframeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'start', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 

type timeframeFields =
  | 'id'
  | 'start'
  | 'end'



  

export interface timeframeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  start: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubmissionConnection

type SubmissionConnectionObject =
  | SubmissionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SubmissionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SubmissionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubmissionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SubmissionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SubmissionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubmissionEdge[]> | prisma.SubmissionEdge[]
  }
  aggregate: {
    type: 'AggregateSubmission'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubmissionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSubmission> | prisma.AggregateSubmission
  }
}
  

// Types for SubmissionEdge

type SubmissionEdgeObject =
  | SubmissionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SubmissionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SubmissionEdgeFieldDetails {
  node: {
    type: 'Submission'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubmissionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission> | prisma.Submission
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSubmission

type AggregateSubmissionObject =
  | AggregateSubmissionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSubmissionFields =
  | 'count'



  

export interface AggregateSubmissionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for timeframeConnection

type timeframeConnectionObject =
  | timeframeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type timeframeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface timeframeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"timeframeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'timeframeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"timeframeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframeEdge[]> | prisma.timeframeEdge[]
  }
  aggregate: {
    type: 'Aggregatetimeframe'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"timeframeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Aggregatetimeframe> | prisma.Aggregatetimeframe
  }
}
  

// Types for timeframeEdge

type timeframeEdgeObject =
  | timeframeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type timeframeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface timeframeEdgeFieldDetails {
  node: {
    type: 'timeframe'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"timeframeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe> | prisma.timeframe
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Aggregatetimeframe

type AggregatetimeframeObject =
  | AggregatetimeframeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatetimeframeFields =
  | 'count'



  

export interface AggregatetimeframeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPerson', args?: MutationCreatePersonArgs[] | false, alias?: string  } 
  | { name: 'updatePerson', args?: MutationUpdatePersonArgs[] | false, alias?: string  } 
  | { name: 'updateManyPersons', args?: MutationUpdateManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'upsertPerson', args?: MutationUpsertPersonArgs[] | false, alias?: string  } 
  | { name: 'deletePerson', args?: MutationDeletePersonArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPersons', args?: MutationDeleteManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'createSubmission', args?: MutationCreateSubmissionArgs[] | false, alias?: string  } 
  | { name: 'updateSubmission', args?: MutationUpdateSubmissionArgs[] | false, alias?: string  } 
  | { name: 'updateManySubmissions', args?: MutationUpdateManySubmissionsArgs[] | false, alias?: string  } 
  | { name: 'upsertSubmission', args?: MutationUpsertSubmissionArgs[] | false, alias?: string  } 
  | { name: 'deleteSubmission', args?: MutationDeleteSubmissionArgs[] | false, alias?: string  } 
  | { name: 'deleteManySubmissions', args?: MutationDeleteManySubmissionsArgs[] | false, alias?: string  } 
  | { name: 'createtimeframe', args?: MutationCreatetimeframeArgs[] | false, alias?: string  } 
  | { name: 'updatetimeframe', args?: MutationUpdatetimeframeArgs[] | false, alias?: string  } 
  | { name: 'updateManytimeframes', args?: MutationUpdateManytimeframesArgs[] | false, alias?: string  } 
  | { name: 'upserttimeframe', args?: MutationUpserttimeframeArgs[] | false, alias?: string  } 
  | { name: 'deletetimeframe', args?: MutationDeletetimeframeArgs[] | false, alias?: string  } 
  | { name: 'deleteManytimeframes', args?: MutationDeleteManytimeframesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPerson'
  | 'updatePerson'
  | 'updateManyPersons'
  | 'upsertPerson'
  | 'deletePerson'
  | 'deleteManyPersons'
  | 'createSubmission'
  | 'updateSubmission'
  | 'updateManySubmissions'
  | 'upsertSubmission'
  | 'deleteSubmission'
  | 'deleteManySubmissions'
  | 'createtimeframe'
  | 'updatetimeframe'
  | 'updateManytimeframes'
  | 'upserttimeframe'
  | 'deletetimeframe'
  | 'deleteManytimeframes'


type MutationCreatePersonArgs =
  | 'data'
type MutationUpdatePersonArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPersonsArgs =
  | 'data'
  | 'where'
type MutationUpsertPersonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePersonArgs =
  | 'where'
type MutationDeleteManyPersonsArgs =
  | 'where'
type MutationCreateSubmissionArgs =
  | 'data'
type MutationUpdateSubmissionArgs =
  | 'data'
  | 'where'
type MutationUpdateManySubmissionsArgs =
  | 'data'
  | 'where'
type MutationUpsertSubmissionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSubmissionArgs =
  | 'where'
type MutationDeleteManySubmissionsArgs =
  | 'where'
type MutationCreatetimeframeArgs =
  | 'data'
type MutationUpdatetimeframeArgs =
  | 'data'
  | 'where'
type MutationUpdateManytimeframesArgs =
  | 'data'
  | 'where'
type MutationUpserttimeframeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletetimeframeArgs =
  | 'where'
type MutationDeleteManytimeframesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPerson: {
    type: 'Person'
    args: Record<MutationCreatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  updatePerson: {
    type: 'Person'
    args: Record<MutationUpdatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateInput, where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updateManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateManyMutationInput, where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPerson: {
    type: 'Person'
    args: Record<MutationUpsertPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput, create: PersonCreateInput, update: PersonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  deletePerson: {
    type: 'Person'
    args: Record<MutationDeletePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  deleteManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSubmission: {
    type: 'Submission'
    args: Record<MutationCreateSubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubmissionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission> | prisma.Submission
  }
  updateSubmission: {
    type: 'Submission'
    args: Record<MutationUpdateSubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubmissionUpdateInput, where: SubmissionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission | null> | prisma.Submission | null
  }
  updateManySubmissions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySubmissionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubmissionUpdateManyMutationInput, where?: SubmissionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSubmission: {
    type: 'Submission'
    args: Record<MutationUpsertSubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubmissionWhereUniqueInput, create: SubmissionCreateInput, update: SubmissionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission> | prisma.Submission
  }
  deleteSubmission: {
    type: 'Submission'
    args: Record<MutationDeleteSubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubmissionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission | null> | prisma.Submission | null
  }
  deleteManySubmissions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySubmissionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SubmissionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createtimeframe: {
    type: 'timeframe'
    args: Record<MutationCreatetimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: timeframeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe> | prisma.timeframe
  }
  updatetimeframe: {
    type: 'timeframe'
    args: Record<MutationUpdatetimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: timeframeUpdateInput, where: timeframeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe | null> | prisma.timeframe | null
  }
  updateManytimeframes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManytimeframesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: timeframeUpdateManyMutationInput, where?: timeframeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upserttimeframe: {
    type: 'timeframe'
    args: Record<MutationUpserttimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: timeframeWhereUniqueInput, create: timeframeCreateInput, update: timeframeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe> | prisma.timeframe
  }
  deletetimeframe: {
    type: 'timeframe'
    args: Record<MutationDeletetimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: timeframeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe | null> | prisma.timeframe | null
  }
  deleteManytimeframes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManytimeframesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: timeframeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'person', args?: SubscriptionPersonArgs[] | false, alias?: string  } 
  | { name: 'submission', args?: SubscriptionSubmissionArgs[] | false, alias?: string  } 
  | { name: 'timeframe', args?: SubscriptionTimeframeArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'person'
  | 'submission'
  | 'timeframe'


type SubscriptionPersonArgs =
  | 'where'
type SubscriptionSubmissionArgs =
  | 'where'
type SubscriptionTimeframeArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  person: {
    type: 'PersonSubscriptionPayload'
    args: Record<SubscriptionPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PersonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonSubscriptionPayload | null> | prisma.PersonSubscriptionPayload | null
  }
  submission: {
    type: 'SubmissionSubscriptionPayload'
    args: Record<SubscriptionSubmissionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SubmissionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubmissionSubscriptionPayload | null> | prisma.SubmissionSubscriptionPayload | null
  }
  timeframe: {
    type: 'timeframeSubscriptionPayload'
    args: Record<SubscriptionTimeframeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: timeframeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframeSubscriptionPayload | null> | prisma.timeframeSubscriptionPayload | null
  }
}
  

// Types for PersonSubscriptionPayload

type PersonSubscriptionPayloadObject =
  | PersonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PersonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PersonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PersonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonPreviousValues | null> | prisma.PersonPreviousValues | null
  }
}
  

// Types for PersonPreviousValues

type PersonPreviousValuesObject =
  | PersonPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'kennitala', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'income', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'personal_discount', args?: [] | false, alias?: string  } 
  | { name: 'pension', args?: [] | false, alias?: string  } 
  | { name: 'additional_pension', args?: [] | false, alias?: string  } 
  | { name: 'union_fees', args?: [] | false, alias?: string  } 
  | { name: 'income_tax_rate', args?: [] | false, alias?: string  } 
  | { name: 'expected_date_of_birth', args?: [] | false, alias?: string  } 

type PersonPreviousValuesFields =
  | 'id'
  | 'kennitala'
  | 'name'
  | 'income'
  | 'address'
  | 'personal_discount'
  | 'pension'
  | 'additional_pension'
  | 'union_fees'
  | 'income_tax_rate'
  | 'expected_date_of_birth'



  

export interface PersonPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  kennitala: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  income: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  personal_discount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pension: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  additional_pension: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  union_fees: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  income_tax_rate: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expected_date_of_birth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubmissionSubscriptionPayload

type SubmissionSubscriptionPayloadObject =
  | SubmissionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SubmissionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SubmissionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubmissionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Submission'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubmissionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Submission | null> | prisma.Submission | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SubmissionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubmissionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubmissionPreviousValues | null> | prisma.SubmissionPreviousValues | null
  }
}
  

// Types for SubmissionPreviousValues

type SubmissionPreviousValuesObject =
  | SubmissionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'number_of_months', args?: [] | false, alias?: string  } 

type SubmissionPreviousValuesFields =
  | 'id'
  | 'number_of_months'



  

export interface SubmissionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number_of_months: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for timeframeSubscriptionPayload

type timeframeSubscriptionPayloadObject =
  | timeframeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type timeframeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface timeframeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"timeframeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'timeframe'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"timeframeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframe | null> | prisma.timeframe | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'timeframePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"timeframeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.timeframePreviousValues | null> | prisma.timeframePreviousValues | null
  }
}
  

// Types for timeframePreviousValues

type timeframePreviousValuesObject =
  | timeframePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'start', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 

type timeframePreviousValuesFields =
  | 'id'
  | 'start'
  | 'end'



  

export interface timeframePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  start: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PersonWhereUniqueInput {
  id?: string | null
}
export type PersonWhereUniqueInputInputObject =
  | Extract<keyof PersonWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PersonWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  kennitala?: string | null
  kennitala_not?: string | null
  kennitala_in?: string[]
  kennitala_not_in?: string[]
  kennitala_lt?: string | null
  kennitala_lte?: string | null
  kennitala_gt?: string | null
  kennitala_gte?: string | null
  kennitala_contains?: string | null
  kennitala_not_contains?: string | null
  kennitala_starts_with?: string | null
  kennitala_not_starts_with?: string | null
  kennitala_ends_with?: string | null
  kennitala_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  income?: number | null
  income_not?: number | null
  income_in?: number[]
  income_not_in?: number[]
  income_lt?: number | null
  income_lte?: number | null
  income_gt?: number | null
  income_gte?: number | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  personal_discount?: number | null
  personal_discount_not?: number | null
  personal_discount_in?: number[]
  personal_discount_not_in?: number[]
  personal_discount_lt?: number | null
  personal_discount_lte?: number | null
  personal_discount_gt?: number | null
  personal_discount_gte?: number | null
  pension?: number | null
  pension_not?: number | null
  pension_in?: number[]
  pension_not_in?: number[]
  pension_lt?: number | null
  pension_lte?: number | null
  pension_gt?: number | null
  pension_gte?: number | null
  additional_pension?: number | null
  additional_pension_not?: number | null
  additional_pension_in?: number[]
  additional_pension_not_in?: number[]
  additional_pension_lt?: number | null
  additional_pension_lte?: number | null
  additional_pension_gt?: number | null
  additional_pension_gte?: number | null
  union_fees?: number | null
  union_fees_not?: number | null
  union_fees_in?: number[]
  union_fees_not_in?: number[]
  union_fees_lt?: number | null
  union_fees_lte?: number | null
  union_fees_gt?: number | null
  union_fees_gte?: number | null
  income_tax_rate?: number | null
  income_tax_rate_not?: number | null
  income_tax_rate_in?: number[]
  income_tax_rate_not_in?: number[]
  income_tax_rate_lt?: number | null
  income_tax_rate_lte?: number | null
  income_tax_rate_gt?: number | null
  income_tax_rate_gte?: number | null
  expected_date_of_birth?: string | null
  expected_date_of_birth_not?: string | null
  expected_date_of_birth_in?: string[]
  expected_date_of_birth_not_in?: string[]
  expected_date_of_birth_lt?: string | null
  expected_date_of_birth_lte?: string | null
  expected_date_of_birth_gt?: string | null
  expected_date_of_birth_gte?: string | null
  AND?: PersonWhereInput[]
  OR?: PersonWhereInput[]
  NOT?: PersonWhereInput[]
}
export type PersonWhereInputInputObject =
  | Extract<keyof PersonWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'kennitala', alias?: string  } 
  | { name: 'kennitala_not', alias?: string  } 
  | { name: 'kennitala_in', alias?: string  } 
  | { name: 'kennitala_not_in', alias?: string  } 
  | { name: 'kennitala_lt', alias?: string  } 
  | { name: 'kennitala_lte', alias?: string  } 
  | { name: 'kennitala_gt', alias?: string  } 
  | { name: 'kennitala_gte', alias?: string  } 
  | { name: 'kennitala_contains', alias?: string  } 
  | { name: 'kennitala_not_contains', alias?: string  } 
  | { name: 'kennitala_starts_with', alias?: string  } 
  | { name: 'kennitala_not_starts_with', alias?: string  } 
  | { name: 'kennitala_ends_with', alias?: string  } 
  | { name: 'kennitala_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'income', alias?: string  } 
  | { name: 'income_not', alias?: string  } 
  | { name: 'income_in', alias?: string  } 
  | { name: 'income_not_in', alias?: string  } 
  | { name: 'income_lt', alias?: string  } 
  | { name: 'income_lte', alias?: string  } 
  | { name: 'income_gt', alias?: string  } 
  | { name: 'income_gte', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'personal_discount', alias?: string  } 
  | { name: 'personal_discount_not', alias?: string  } 
  | { name: 'personal_discount_in', alias?: string  } 
  | { name: 'personal_discount_not_in', alias?: string  } 
  | { name: 'personal_discount_lt', alias?: string  } 
  | { name: 'personal_discount_lte', alias?: string  } 
  | { name: 'personal_discount_gt', alias?: string  } 
  | { name: 'personal_discount_gte', alias?: string  } 
  | { name: 'pension', alias?: string  } 
  | { name: 'pension_not', alias?: string  } 
  | { name: 'pension_in', alias?: string  } 
  | { name: 'pension_not_in', alias?: string  } 
  | { name: 'pension_lt', alias?: string  } 
  | { name: 'pension_lte', alias?: string  } 
  | { name: 'pension_gt', alias?: string  } 
  | { name: 'pension_gte', alias?: string  } 
  | { name: 'additional_pension', alias?: string  } 
  | { name: 'additional_pension_not', alias?: string  } 
  | { name: 'additional_pension_in', alias?: string  } 
  | { name: 'additional_pension_not_in', alias?: string  } 
  | { name: 'additional_pension_lt', alias?: string  } 
  | { name: 'additional_pension_lte', alias?: string  } 
  | { name: 'additional_pension_gt', alias?: string  } 
  | { name: 'additional_pension_gte', alias?: string  } 
  | { name: 'union_fees', alias?: string  } 
  | { name: 'union_fees_not', alias?: string  } 
  | { name: 'union_fees_in', alias?: string  } 
  | { name: 'union_fees_not_in', alias?: string  } 
  | { name: 'union_fees_lt', alias?: string  } 
  | { name: 'union_fees_lte', alias?: string  } 
  | { name: 'union_fees_gt', alias?: string  } 
  | { name: 'union_fees_gte', alias?: string  } 
  | { name: 'income_tax_rate', alias?: string  } 
  | { name: 'income_tax_rate_not', alias?: string  } 
  | { name: 'income_tax_rate_in', alias?: string  } 
  | { name: 'income_tax_rate_not_in', alias?: string  } 
  | { name: 'income_tax_rate_lt', alias?: string  } 
  | { name: 'income_tax_rate_lte', alias?: string  } 
  | { name: 'income_tax_rate_gt', alias?: string  } 
  | { name: 'income_tax_rate_gte', alias?: string  } 
  | { name: 'expected_date_of_birth', alias?: string  } 
  | { name: 'expected_date_of_birth_not', alias?: string  } 
  | { name: 'expected_date_of_birth_in', alias?: string  } 
  | { name: 'expected_date_of_birth_not_in', alias?: string  } 
  | { name: 'expected_date_of_birth_lt', alias?: string  } 
  | { name: 'expected_date_of_birth_lte', alias?: string  } 
  | { name: 'expected_date_of_birth_gt', alias?: string  } 
  | { name: 'expected_date_of_birth_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubmissionWhereUniqueInput {
  id?: string | null
}
export type SubmissionWhereUniqueInputInputObject =
  | Extract<keyof SubmissionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface timeframeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  AND?: timeframeWhereInput[]
  OR?: timeframeWhereInput[]
  NOT?: timeframeWhereInput[]
}
export type timeframeWhereInputInputObject =
  | Extract<keyof timeframeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubmissionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  timeframes_every?: timeframeWhereInput | null
  timeframes_some?: timeframeWhereInput | null
  timeframes_none?: timeframeWhereInput | null
  person?: PersonWhereInput | null
  number_of_months?: number | null
  number_of_months_not?: number | null
  number_of_months_in?: number[]
  number_of_months_not_in?: number[]
  number_of_months_lt?: number | null
  number_of_months_lte?: number | null
  number_of_months_gt?: number | null
  number_of_months_gte?: number | null
  AND?: SubmissionWhereInput[]
  OR?: SubmissionWhereInput[]
  NOT?: SubmissionWhereInput[]
}
export type SubmissionWhereInputInputObject =
  | Extract<keyof SubmissionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'timeframes_every', alias?: string  } 
  | { name: 'timeframes_some', alias?: string  } 
  | { name: 'timeframes_none', alias?: string  } 
  | { name: 'person', alias?: string  } 
  | { name: 'number_of_months', alias?: string  } 
  | { name: 'number_of_months_not', alias?: string  } 
  | { name: 'number_of_months_in', alias?: string  } 
  | { name: 'number_of_months_not_in', alias?: string  } 
  | { name: 'number_of_months_lt', alias?: string  } 
  | { name: 'number_of_months_lte', alias?: string  } 
  | { name: 'number_of_months_gt', alias?: string  } 
  | { name: 'number_of_months_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface timeframeWhereUniqueInput {
  id?: string | null
}
export type timeframeWhereUniqueInputInputObject =
  | Extract<keyof timeframeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PersonCreateInput {
  id?: string | null
  kennitala?: string
  name?: string
  income?: number
  address?: string
  personal_discount?: number
  pension?: number
  additional_pension?: number
  union_fees?: number
  income_tax_rate?: number
  expected_date_of_birth?: string
}
export type PersonCreateInputInputObject =
  | Extract<keyof PersonCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'kennitala', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'income', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'personal_discount', alias?: string  } 
  | { name: 'pension', alias?: string  } 
  | { name: 'additional_pension', alias?: string  } 
  | { name: 'union_fees', alias?: string  } 
  | { name: 'income_tax_rate', alias?: string  } 
  | { name: 'expected_date_of_birth', alias?: string  } 
  
export interface PersonUpdateInput {
  kennitala?: string | null
  name?: string | null
  income?: number | null
  address?: string | null
  personal_discount?: number | null
  pension?: number | null
  additional_pension?: number | null
  union_fees?: number | null
  income_tax_rate?: number | null
  expected_date_of_birth?: string | null
}
export type PersonUpdateInputInputObject =
  | Extract<keyof PersonUpdateInput, string>
  | { name: 'kennitala', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'income', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'personal_discount', alias?: string  } 
  | { name: 'pension', alias?: string  } 
  | { name: 'additional_pension', alias?: string  } 
  | { name: 'union_fees', alias?: string  } 
  | { name: 'income_tax_rate', alias?: string  } 
  | { name: 'expected_date_of_birth', alias?: string  } 
  
export interface PersonUpdateManyMutationInput {
  kennitala?: string | null
  name?: string | null
  income?: number | null
  address?: string | null
  personal_discount?: number | null
  pension?: number | null
  additional_pension?: number | null
  union_fees?: number | null
  income_tax_rate?: number | null
  expected_date_of_birth?: string | null
}
export type PersonUpdateManyMutationInputInputObject =
  | Extract<keyof PersonUpdateManyMutationInput, string>
  | { name: 'kennitala', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'income', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'personal_discount', alias?: string  } 
  | { name: 'pension', alias?: string  } 
  | { name: 'additional_pension', alias?: string  } 
  | { name: 'union_fees', alias?: string  } 
  | { name: 'income_tax_rate', alias?: string  } 
  | { name: 'expected_date_of_birth', alias?: string  } 
  
export interface SubmissionCreateInput {
  id?: string | null
  timeframes?: timeframeCreateManyInput | null
  person?: PersonCreateOneInput
  number_of_months?: number
}
export type SubmissionCreateInputInputObject =
  | Extract<keyof SubmissionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'timeframes', alias?: string  } 
  | { name: 'person', alias?: string  } 
  | { name: 'number_of_months', alias?: string  } 
  
export interface timeframeCreateManyInput {
  create?: timeframeCreateInput[]
  connect?: timeframeWhereUniqueInput[]
}
export type timeframeCreateManyInputInputObject =
  | Extract<keyof timeframeCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface timeframeCreateInput {
  id?: string | null
  start?: string
  end?: string
}
export type timeframeCreateInputInputObject =
  | Extract<keyof timeframeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface PersonCreateOneInput {
  create?: PersonCreateInput | null
  connect?: PersonWhereUniqueInput | null
}
export type PersonCreateOneInputInputObject =
  | Extract<keyof PersonCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubmissionUpdateInput {
  timeframes?: timeframeUpdateManyInput | null
  person?: PersonUpdateOneRequiredInput | null
  number_of_months?: number | null
}
export type SubmissionUpdateInputInputObject =
  | Extract<keyof SubmissionUpdateInput, string>
  | { name: 'timeframes', alias?: string  } 
  | { name: 'person', alias?: string  } 
  | { name: 'number_of_months', alias?: string  } 
  
export interface timeframeUpdateManyInput {
  create?: timeframeCreateInput[]
  update?: timeframeUpdateWithWhereUniqueNestedInput[]
  upsert?: timeframeUpsertWithWhereUniqueNestedInput[]
  delete?: timeframeWhereUniqueInput[]
  connect?: timeframeWhereUniqueInput[]
  set?: timeframeWhereUniqueInput[]
  disconnect?: timeframeWhereUniqueInput[]
  deleteMany?: timeframeScalarWhereInput[]
  updateMany?: timeframeUpdateManyWithWhereNestedInput[]
}
export type timeframeUpdateManyInputInputObject =
  | Extract<keyof timeframeUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface timeframeUpdateWithWhereUniqueNestedInput {
  where?: timeframeWhereUniqueInput
  data?: timeframeUpdateDataInput
}
export type timeframeUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof timeframeUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface timeframeUpdateDataInput {
  start?: string | null
  end?: string | null
}
export type timeframeUpdateDataInputInputObject =
  | Extract<keyof timeframeUpdateDataInput, string>
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface timeframeUpsertWithWhereUniqueNestedInput {
  where?: timeframeWhereUniqueInput
  update?: timeframeUpdateDataInput
  create?: timeframeCreateInput
}
export type timeframeUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof timeframeUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface timeframeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  AND?: timeframeScalarWhereInput[]
  OR?: timeframeScalarWhereInput[]
  NOT?: timeframeScalarWhereInput[]
}
export type timeframeScalarWhereInputInputObject =
  | Extract<keyof timeframeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface timeframeUpdateManyWithWhereNestedInput {
  where?: timeframeScalarWhereInput
  data?: timeframeUpdateManyDataInput
}
export type timeframeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof timeframeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface timeframeUpdateManyDataInput {
  start?: string | null
  end?: string | null
}
export type timeframeUpdateManyDataInputInputObject =
  | Extract<keyof timeframeUpdateManyDataInput, string>
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface PersonUpdateOneRequiredInput {
  create?: PersonCreateInput | null
  update?: PersonUpdateDataInput | null
  upsert?: PersonUpsertNestedInput | null
  connect?: PersonWhereUniqueInput | null
}
export type PersonUpdateOneRequiredInputInputObject =
  | Extract<keyof PersonUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonUpdateDataInput {
  kennitala?: string | null
  name?: string | null
  income?: number | null
  address?: string | null
  personal_discount?: number | null
  pension?: number | null
  additional_pension?: number | null
  union_fees?: number | null
  income_tax_rate?: number | null
  expected_date_of_birth?: string | null
}
export type PersonUpdateDataInputInputObject =
  | Extract<keyof PersonUpdateDataInput, string>
  | { name: 'kennitala', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'income', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'personal_discount', alias?: string  } 
  | { name: 'pension', alias?: string  } 
  | { name: 'additional_pension', alias?: string  } 
  | { name: 'union_fees', alias?: string  } 
  | { name: 'income_tax_rate', alias?: string  } 
  | { name: 'expected_date_of_birth', alias?: string  } 
  
export interface PersonUpsertNestedInput {
  update?: PersonUpdateDataInput
  create?: PersonCreateInput
}
export type PersonUpsertNestedInputInputObject =
  | Extract<keyof PersonUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubmissionUpdateManyMutationInput {
  number_of_months?: number | null
}
export type SubmissionUpdateManyMutationInputInputObject =
  | Extract<keyof SubmissionUpdateManyMutationInput, string>
  | { name: 'number_of_months', alias?: string  } 
  
export interface timeframeUpdateInput {
  start?: string | null
  end?: string | null
}
export type timeframeUpdateInputInputObject =
  | Extract<keyof timeframeUpdateInput, string>
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface timeframeUpdateManyMutationInput {
  start?: string | null
  end?: string | null
}
export type timeframeUpdateManyMutationInputInputObject =
  | Extract<keyof timeframeUpdateManyMutationInput, string>
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  
export interface PersonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PersonWhereInput | null
  AND?: PersonSubscriptionWhereInput[]
  OR?: PersonSubscriptionWhereInput[]
  NOT?: PersonSubscriptionWhereInput[]
}
export type PersonSubscriptionWhereInputInputObject =
  | Extract<keyof PersonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubmissionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SubmissionWhereInput | null
  AND?: SubmissionSubscriptionWhereInput[]
  OR?: SubmissionSubscriptionWhereInput[]
  NOT?: SubmissionSubscriptionWhereInput[]
}
export type SubmissionSubscriptionWhereInputInputObject =
  | Extract<keyof SubmissionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface timeframeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: timeframeWhereInput | null
  AND?: timeframeSubscriptionWhereInput[]
  OR?: timeframeSubscriptionWhereInput[]
  NOT?: timeframeSubscriptionWhereInput[]
}
export type timeframeSubscriptionWhereInputInputObject =
  | Extract<keyof timeframeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type PersonOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'kennitala_ASC'
  | 'kennitala_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'income_ASC'
  | 'income_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'personal_discount_ASC'
  | 'personal_discount_DESC'
  | 'pension_ASC'
  | 'pension_DESC'
  | 'additional_pension_ASC'
  | 'additional_pension_DESC'
  | 'union_fees_ASC'
  | 'union_fees_DESC'
  | 'income_tax_rate_ASC'
  | 'income_tax_rate_DESC'
  | 'expected_date_of_birth_ASC'
  | 'expected_date_of_birth_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type timeframeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'start_ASC'
  | 'start_DESC'
  | 'end_ASC'
  | 'end_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SubmissionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'number_of_months_ASC'
  | 'number_of_months_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  