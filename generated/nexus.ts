/**
 * This file was automatically generated by Nexus 0.11.7
 * Do not make changes to this file directly
 */




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PersonCreateInput: { // input type
    additional_pension: number; // Float!
    address: string; // String!
    expected_date_of_birth: any; // DateTime!
    id?: string | null; // ID
    income: number; // Float!
    income_tax_rate: number; // Float!
    kennitala: string; // String!
    name: string; // String!
    pension: number; // Float!
    personal_discount: number; // Float!
    union_fees: number; // Float!
  }
  PersonWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Person: { // root type
    additional_pension: number; // Float!
    address: string; // String!
    expected_date_of_birth: any; // DateTime!
    id: string; // ID!
    income: number; // Float!
    income_tax_rate: number; // Float!
    kennitala: string; // String!
    name: string; // String!
    pension: number; // Float!
    personal_discount: number; // Float!
    union_fees: number; // Float!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  PersonCreateInput: NexusGenInputs['PersonCreateInput'];
  PersonWhereUniqueInput: NexusGenInputs['PersonWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPerson: NexusGenRootTypes['Person']; // Person!
  }
  Person: { // field return type
    additional_pension: number; // Float!
    address: string; // String!
    expected_date_of_birth: any; // DateTime!
    id: string; // ID!
    income: number; // Float!
    income_tax_rate: number; // Float!
    kennitala: string; // String!
    name: string; // String!
    pension: number; // Float!
    personal_discount: number; // Float!
    union_fees: number; // Float!
  }
  Query: { // field return type
    person: NexusGenRootTypes['Person'] | null; // Person
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPerson: { // args
      data: NexusGenInputs['PersonCreateInput']; // PersonCreateInput!
    }
  }
  Query: {
    person: { // args
      where: NexusGenInputs['PersonWhereUniqueInput']; // PersonWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Person" | "Query";

export type NexusGenInputNames = "PersonCreateInput" | "PersonWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}