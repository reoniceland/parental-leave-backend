type Query {
  person(kennitala: String!): Person
  persons: [Person]
}
type Mutation {
  createPerson(data: PersonCreateInput!): Person!
  createSubmission(
    kennitala: String!
    number_of_months: Int!
    timeFrames: [TimeFrameCreateInput]
  ): Submission
}
scalar Long
scalar DateTime
type Person {
  id: ID!
  kennitala: String!
  name: String!
  income: Float!
  address: String!
  can_calculate: Boolean!

  spouse: Person
  personal_discount: Float!
  pension: Float!
  additional_pension: Float!
  union_fees: Float!
  income_tax_rate: Float!
  expected_date_of_birth: DateTime!
}
input PersonCreateInput {
  kennitala: String!
  name: String!
  income: Float!
  address: String!
  spouse: PersonCreateInput
  personal_discount: Float!
  pension: Float!
  additional_pension: Float!
  union_fees: Float!
  income_tax_rate: Float!
  expected_date_of_birth: DateTime!
}

type Submission {
  id: ID!
  timeframes: [TimeFrame]
  person: Person!
  number_of_months: Int!
  payPerMonth: Float
  payTotal: Float
}

type TimeFrame {
  id: ID!
  start: DateTime!
  end: DateTime!
}
input TimeFrameCreateInput {
  start: DateTime!
  end: DateTime!
}
